#!/usr/bin/env bash

# Copyright (C) 2021 Paul Richardson
# This file is part of dep-finder <https://github.com/phantomjinx/dep-finder>.
#
# dep-finder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dep-finder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with dep-finder.  If not, see <http://www.gnu.org/licenses/>.

MIN_JDEPS_VERSION=11
ARGS=("$@")

# Dir where this script is located
basedir() {
    # Default is current directory
    local script=${BASH_SOURCE[0]}

    # Resolve symbolic links
    if [ -L $script ]; then
        if readlink -f $script >/dev/null 2>&1; then
            script=$(readlink -f $script)
        elif readlink $script >/dev/null 2>&1; then
            script=$(readlink $script)
        elif realpath $script >/dev/null 2>&1; then
            script=$(realpath $script)
        else
            echo "ERROR: Cannot resolve symbolic link $script"
            exit 1
        fi
    fi

    local dir=$(dirname "$script")
    local full_dir=$(cd "${dir}" && pwd)
    echo ${full_dir}
}

LIB=$(basedir)/lib

source "${LIB}/help.sh"
source "${LIB}/utils.sh"
source "${LIB}/jdeps.sh"
source "${LIB}/docker.sh"
source "${LIB}/maven.sh"

if [ $(hasflag --jar -j) ]; then
  JDEPS=$(jdeps_is_available)
fi

if [ "$(contains_error ${JDEPS})" == "YES" ]; then
  echo "${JDEPS}"
  exit 1
fi

if [ $(hasflag --help -h) ]; then
  do_help
elif [ $(hasflag --image -i) ]; then
  DOCKER=$(docker_is_available)
  if [ "$(contains_error ${DOCKER})" == "YES" ]; then
    echo ${DOCKER}
    exit 1
  fi

  do_image "$(readopt --image -i)"
elif [ $(hasflag --jar -j) ]; then
  do_jar "$(readopt --jar -j)"
elif [ $(hasflag --pom -p) ]; then
  MAVEN=$(maven_is_available)
  if [ "$(contains_error ${MAVEN})" == "YES" ]; then
    echo ${MAVEN}
    exit 1
  fi

  do_pom "$(readopt --pom -p)"
else
  echo "ERROR: invalid command. See help for details.'"
fi
